name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release, Debug]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Remove previous build directory
      run: |
        if [ -d "${{ github.workspace }}/cmake-build-debug" ]; then
          rm -rf ${{ github.workspace }}/cmake-build-debug
        else
          powershell -Command "Remove-Item -Recurse -Force '${{ github.workspace }}\\cmake-build-debug'"

    - name: Cache CMake files
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/cmake-build-debug
        key: ${{ runner.os }}-cmake-${{ github.ref_name }}-${{ matrix.build_type }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y clang-tidy cmake gcc g++

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/cmake-build-debug" >> "$GITHUB_OUTPUT"

    - name: Lint check with clang-tidy
      if: matrix.os == 'ubuntu-latest'
      run: |
        clang-tidy \
        $(find ${{ github.workspace }}/src -name '*.c') \
        -p ${{ steps.strings.outputs.build-output-dir }}

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Run unit tests
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: ${{ steps.strings.outputs.build-output-dir }}
