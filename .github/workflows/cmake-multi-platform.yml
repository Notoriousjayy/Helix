name: CMake on Unix/Linux

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
        include:
          - c_compiler: gcc
            cpp_compiler: g++

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Remove previous build directory
      run: rm -rf ${{ github.workspace }}/cmake-build-debug

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy cmake gcc g++ libcunit1 libcunit1-dev

    - name: Prepare CMake Modules
      run: mkdir -p ${{ github.workspace }}/cmake/Modules

    - name: Debug Installed Files
      run: |
        echo "Checking for installed CUnit files:"
        find /usr -name "CUnit*"
        apt list --installed | grep cunit

    - name: Configure CMake
      run: |
        cmake -B ${{ github.workspace }}/cmake-build-debug \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DCMAKE_MODULE_PATH="${{ github.workspace }}/cmake/Modules" \
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/cmake-build-debug --config ${{ matrix.build_type }}

    - name: Check build output directory
      run: ls -R ${{ github.workspace }}/cmake-build-debug

    - name: Run Unit Tests
      working-directory: ${{ github.workspace }}/cmake-build-debug
      run: |
        echo "Running unit tests..."
        ctest --output-on-failure --build-config ${{ matrix.build_type }}

    - name: Upload Build Artifacts (on failure)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: ${{ github.workspace }}/cmake-build-debug

    - name: Ensure install directory exists
      run: mkdir -p ${{ github.workspace }}/install

    - name: Install Build Artifacts
      run: |
        cmake --install ${{ github.workspace }}/cmake-build-debug \
        --config ${{ matrix.build_type }} \
        --prefix ${{ github.workspace }}/install --verbose

    - name: Verify Installation Directory
      run: |
        echo "Verifying installed files:"
        ls -l ${{ github.workspace }}/install
        if [ ! -d "${{ github.workspace }}/install" ] || [ -z "$(ls -A ${{ github.workspace }}/install)" ]; then
          echo "Error: Install directory is empty or does not exist."
          exit 1
        fi

    - name: Create Binary Package
      run: |
        mkdir -p ${{ github.workspace }}/packages
        tar -czf ${{ github.workspace }}/packages/myproject-${{ matrix.build_type }}.tar.gz -C ${{ github.workspace }}/install .

    - name: Upload Binary Package
      uses: actions/upload-artifact@v3
      with:
        name: binary-package-${{ matrix.build_type }}
        path: ${{ github.workspace }}/packages/myproject-${{ matrix.build_type }}.tar.gz
